# .github/workflows/build-and-push.yml
name: CI/CD Pipeline - Build, Push, and Deploy

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')

jobs:
  build-and-push:
    # ... (the build-and-push job from Part 4 remains exactly the same) ...
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ---- NEW DEPLOYMENT JOB ----
  deploy-to-ec2:
    name: Deploy to AWS EC2
    # This job depends on the 'build-and-push' job. It will only run if that one succeeds.
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 instance
        # A popular action for executing commands over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22 # Default SSH port
          # The script to run on the remote server
          script: |
            # Login to GHCR on the EC2 instance
            # We pass the GITHUB_TOKEN as a secret to the SSH session
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            sudo docker pull ${{ env.IMAGE_NAME }}:latest

            # Stop and remove the old container, if it exists
            # '|| true' ensures the command doesn't fail if the container isn't running
            sudo docker stop my-node-container || true
            sudo docker rm my-node-container || true

            # Run the new container
            sudo docker run -d --name my-node-container -p 3000:3000 ${{ env.IMAGE_NAME }}:latest
